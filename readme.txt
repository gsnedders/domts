Running the W3C DOM Test Suite on Python
========================================

The domts package is a Python 2.0-or-later TSML interpreter capable of running
the tests in the current DOMTS suites, as of June 2004: level1/core, html;
level2/core, html, events; level3/core, ls, events, validation, xpath).

How to get it running:

1. Download the DOM Test Suite. Easiest way is to grab a snapshot from the CVS
   project DOM-Test-Suite at :pserver:anonymous@dev.w3.org:/sources/public.

2. Add DTD files. The test description XML files inside tests/levelN/feature/
   all refer to a doctype domN.dtd which is not provided. It is generated by
   the Java/XSLT framework normally, but for the purposes of ensuring DOM
   implementations that read the external DTD do not complain, it suffices to
   drop empty files in their place. (ie. dom2.dtd in tests/level2/core, etc.)

3. Some of the level3 test description files use an external entity, eg.
   dom3tests.ent. To run these tests you will need an implementation
   supporting external entities (eg. pxdom 1.1 or later). Alternatively you
   could copy the contents of dom3tests.ent into each of the files to
   replace the external entity declaration and reference.

4. Run rundomtests.py from the command line with the pathname of a test file
   or suite file (normally alltests.xml) as an argument. The script should
   spin for a while before spitting out a summary of tests that were failed,
   and tests that could not be run (because they require a feature that the
   tested implementation didn't support).

rundomtests.py tests minidom by default. If you wish to test a different
implementation, use the --testdom=name command-line option. Known names are:

  minidom - built-in with many Python distributions since version 2.0
  4DOM - the wide-ranging implementation supplied as part of PyXML
  pxdom - this author's stand-alone pure-Python implementation
  cDomlette - 4Suite 1.0's C-extension optimised implementation
  FtMiniDom - 4Suite 1.0's pure-Python backup implementation
  microdom - the minimal implementation supplied with Twisted

domts needs a working DOM implementation to interpret the test descriptions
themselves. By default it will use minidom which usually suffices, but not if
it's the minidom from Python 2.0, which is too broken to use, or if you're
trying to run the Level 3 tests that require external entity support.

You can specify an alternative using the command-line option --workdom=name.
minidom, 4DOM and pxdom should work, the others probably won't support enough
DOM for domts to work with.

If you have a new DOM implementation not covered here, it should be easy
enough to add. See the domts/implementations.py file for details. Also, the
domts directory can be dropped into your Python path and used as an importable
package if you wish to control it from other software. See domts/__init__.py
and the runSuite function.


Changelog
=========

0.1 -> 0.2:
  - added support for all remaining (non-Core/LS) suites
0.2 -> 0.3:
  - added support for new TSML constructs
0.3 -> 0.4:
  - added Twisted's microdom to domts.implementations
  - added support for new TSML Monitor objects and new LSException
0.4 -> 0.5:
  - allowed single test to be passed in to runSuite as well as suite doc
  - added missing isDerivedFrom interface
  - added new TSML comparators 'less', 'greater' and 'lowerSeverity'
  - added Level 1 HTML submit, reset methods
  - allowed 'contains' on strings to be case-insensitive
  - fixed isNull on complex objects
  - made Level 3 implementations remove entity references for L3 test docs
0.5 -> 0.6:
  - slightly changed exception strings to hopefully not cause unicode errors
  - redo initialisation of complex objects to allow assignment or construction
    (tests use both)
  - made L3 imps as work imps *not* normalise Unicode chars, as some test docs
    seem to require non-normalised values
